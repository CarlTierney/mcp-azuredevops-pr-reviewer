"""Test that reviews include proper signature and version information"""

import unittest
from unittest.mock import Mock, patch
from azure_pr_reviewer.azure_client import AzureDevOpsClient
from azure_pr_reviewer.config import Settings


class TestReviewSignature(unittest.TestCase):
    """Test that automated review signatures are properly included"""
    
    def setUp(self):
        """Set up test fixtures"""
        self.settings = Mock(spec=Settings)
        self.settings.azure_pat = "test_pat"
        self.settings.azure_organization = "test_org"
        
        with patch('azure_pr_reviewer.azure_client.Connection'):
            self.client = AzureDevOpsClient(self.settings)
    
    def test_review_summary_includes_signature(self):
        """Test that review summary includes version and signature"""
        review_data = {
            "approved": True,
            "severity": "minor",
            "summary": "Code looks good with minor suggestions",
            "comments": [],
            "test_suggestions": []
        }
        
        summary = self.client._format_review_summary(review_data)
        
        # Check for version signature
        self.assertIn("Azure PR Reviewer v2.0.0", summary)
        self.assertIn("Automated Code Review System", summary)
        self.assertIn("Powered by Claude AI", summary)
        
        # Check for timestamp
        self.assertIn("Review timestamp:", summary)
        self.assertIn("UTC", summary)
    
    def test_individual_comments_include_signature(self):
        """Test that individual comments include the reviewer signature"""
        comment = {
            "severity": "warning",
            "content": "Consider adding null check here"
        }
        
        formatted = self.client._format_review_comment(comment)
        
        # Check that comment includes signature
        self.assertIn("Azure PR Reviewer v2.0.0", formatted)
        self.assertIn("[WARNING]", formatted)
        self.assertIn("Consider adding null check", formatted)
    
    def test_summary_with_test_suggestions_includes_signature(self):
        """Test that summary with test suggestions still includes signature"""
        review_data = {
            "approved": False,
            "severity": "major",
            "summary": "Issues found that need addressing",
            "comments": [
                {"severity": "error", "content": "Security issue detected", "line_number": 10}
            ],
            "test_suggestions": [
                {
                    "test_name": "ShouldValidateInput",
                    "description": "Verify input validation",
                    "test_code": "[Test]\npublic void ShouldValidateInput() { }"
                }
            ]
        }
        
        summary = self.client._format_review_summary(review_data)
        
        # Check that all components are present
        self.assertIn("Required Test Cases", summary)
        self.assertIn("ShouldValidateInput", summary)
        
        # Check signature is still present
        self.assertIn("Azure PR Reviewer v2.0.0", summary)
        self.assertIn("Automated Code Review System with Security Analysis", summary)
    
    def test_signature_format_consistency(self):
        """Test that signature format is consistent across different review types"""
        test_cases = [
            {"approved": True, "severity": "approved", "summary": "Looks good"},
            {"approved": False, "severity": "critical", "summary": "Critical issues"},
            {"approved": True, "severity": "minor", "summary": "Minor suggestions"}
        ]
        
        for review_data in test_cases:
            summary = self.client._format_review_summary(review_data)
            
            # Signature should always be present
            self.assertIn("Generated by Azure PR Reviewer v2.0.0", summary)
            
            # Should always end with proper signature block
            lines = summary.split('\n')
            
            # Find the signature section (after ---)
            signature_found = False
            for i, line in enumerate(lines):
                if line.strip() == "---" and i < len(lines) - 1:
                    # Check next few lines for signature
                    remaining = '\n'.join(lines[i:])
                    if "Azure PR Reviewer v2.0.0" in remaining:
                        signature_found = True
                        break
            
            self.assertTrue(signature_found, f"Signature not properly formatted in: {review_data['severity']} review")
    
    def test_version_number_is_consistent(self):
        """Test that version number is consistent across all outputs"""
        review_data = {
            "approved": True,
            "severity": "minor",
            "summary": "Test review",
            "comments": []
        }
        
        summary = self.client._format_review_summary(review_data)
        comment = self.client._format_review_comment({"severity": "info", "content": "test"})
        
        # Version should be the same everywhere
        version = "v2.0.0"
        self.assertIn(version, summary)
        self.assertIn(version, comment)
    
    def test_timestamp_format(self):
        """Test that timestamp is properly formatted"""
        timestamp = self.client._get_timestamp()
        
        # Should match format: YYYY-MM-DD HH:MM:SS UTC
        import re
        pattern = r'\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2} UTC'
        self.assertRegex(timestamp, pattern, "Timestamp format incorrect")


if __name__ == '__main__':
    unittest.main()